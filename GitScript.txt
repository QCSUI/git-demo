cd D:\GitTutorial

git config --global user.name "QCSUI"

git config --global user.email "sqc6160@gmail.com"

ls -a   #show all the files

git init  # initialize the Git Repository

touch 1.py   # create a new (Untracked)file 

git status  # 

git add 1.py

## Untracked >>"add">> Staged >>"commit">>Unmodified/Modified(Unstaged) 
# So now, 1.py are Staged

git log
git diff  # to see the difference between the files unadded(unstaged) yet and the commited
git add . 
#git status # if use the git status now, we can find that the color turn green. because the change has been added
git commit -m "Change 1"  # m for message
## 要先把要commit的东西add一下，再commit


git diff #来看对比，三种状态之间 unstaged，staged，commited
git diff  # 看还没add的和commit的
git diff --cached  # 看add的和commit的
git diff HEAD  # 看add和没add的，not verified  

git log --oneline


## 回到从前的commit， reset
git add .
git commit --amend --no-edit #把刚修改的版本代替commit里最新的一版

git add 1.py  # Stage状态
git reset 1.py  #返回unstaged状态

git log --oneline  #
git reset --hard HEAD  #把HEAD返回到最近的一次commit状态

git log --oneline  #
git reset --hard HEAD^#把HEAD以及文件内容，返回到倒数第二次commit的状态，

git log --oneline  #
git reset --hard {ID}

git reflog  # 用于看HEAD的移动轨迹从哪一个ID到哪一个ID



##对某一文件-回到以前 checkout
git checkout {ID} -- 1.py  # 把其中一个文件给还原成以前的版本

从原来的一个commit开始

##Branch 从主分支master分出来
##master是最稳定版本
##big feature 

          __________little feature 
-------|__________________matser(mian)
                    |______big feature 

git log --oneline --graph  #ID前面会出现*
git branch dev  # 建立一个dev的branch
git branch  # 看是在哪建立的branch
git checkout dev  # checkout方法把文件指针指到dev这个branch上
git checkout master 
git branch -d dev  # delete
git checkout -b dev  # 把branch和checkout合起来，建议一个dev分支而且把HEAD指到这里


git commit -am 


git merge --no-ff -m"keep merge info" dev   # no fast forward
git log --oneline --graph









